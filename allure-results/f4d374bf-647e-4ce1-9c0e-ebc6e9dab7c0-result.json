{"name": "test_donation_req", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"submit\" class=\"btn btn-primary\" style=\"\">...</button> is not clickable at point (1084, 483). Other element would receive the click: <div class=\"modal-backdrop fade show\"></div>\n  (Session info: chrome=131.0.6778.265)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F70480D5+2992373]\n\t(No symbol) [0x00007FF6F6CDBFD0]\n\t(No symbol) [0x00007FF6F6B7590A]\n\t(No symbol) [0x00007FF6F6BD0F2E]\n\t(No symbol) [0x00007FF6F6BCE9CC]\n\t(No symbol) [0x00007FF6F6BCBBA6]\n\t(No symbol) [0x00007FF6F6BCAB01]\n\t(No symbol) [0x00007FF6F6BBCD40]\n\t(No symbol) [0x00007FF6F6BEF36A]\n\t(No symbol) [0x00007FF6F6BBC596]\n\t(No symbol) [0x00007FF6F6BEF580]\n\t(No symbol) [0x00007FF6F6C0F584]\n\t(No symbol) [0x00007FF6F6BEF113]\n\t(No symbol) [0x00007FF6F6BBA918]\n\t(No symbol) [0x00007FF6F6BBBA81]\n\tGetHandleVerifier [0x00007FF6F70A6A2D+3379789]\n\tGetHandleVerifier [0x00007FF6F70BC32D+3468109]\n\tGetHandleVerifier [0x00007FF6F70B0043+3418211]\n\tGetHandleVerifier [0x00007FF6F6E3C78B+847787]\n\t(No symbol) [0x00007FF6F6CE757F]\n\t(No symbol) [0x00007FF6F6CE2FC4]\n\t(No symbol) [0x00007FF6F6CE315D]\n\t(No symbol) [0x00007FF6F6CD2979]\n\tBaseThreadInitThunk [0x00007FFCE53D7374+20]\n\tRtlUserThreadStart [0x00007FFCE711CC91+33]", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7d33ae9120b4f5798e0f9a10c2518a9e\")>\n\n    def test_donation_req(setup):\n        driver = setup\n        don_req = driver.find_element(By.XPATH,\"//button[normalize-space()='Donation Request']\")\n        blink_element(driver,don_req)\n        don_req.click()\n        time.sleep(2)\n        ent_num = driver.find_element(By.XPATH,\"//input[@id='request_phone_number']\")\n        blink_element(driver,ent_num)\n        ent_num.send_keys(\"03000000002\")\n        pro_button = driver.find_element(By.XPATH,\"//button[normalize-space()='Proceed']\")\n        blink_element(driver,pro_button)\n>       pro_button.click()\n\nBlood Donor Automation.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000210242961E0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6F6CD2979]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCE53D7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCE711CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"submit\" class=\"btn btn-primary\" style=\"\">...</button> is not clickable at point (1084, 483). Other element would receive the click: <div class=\"modal-backdrop fade show\"></div>\nE         (Session info: chrome=131.0.6778.265)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6F70480D5+2992373]\nE       \t(No symbol) [0x00007FF6F6CDBFD0]\nE       \t(No symbol) [0x00007FF6F6B7590A]\nE       \t(No symbol) [0x00007FF6F6BD0F2E]\nE       \t(No symbol) [0x00007FF6F6BCE9CC]\nE       \t(No symbol) [0x00007FF6F6BCBBA6]\nE       \t(No symbol) [0x00007FF6F6BCAB01]\nE       \t(No symbol) [0x00007FF6F6BBCD40]\nE       \t(No symbol) [0x00007FF6F6BEF36A]\nE       \t(No symbol) [0x00007FF6F6BBC596]\nE       \t(No symbol) [0x00007FF6F6BEF580]\nE       \t(No symbol) [0x00007FF6F6C0F584]\nE       \t(No symbol) [0x00007FF6F6BEF113]\nE       \t(No symbol) [0x00007FF6F6BBA918]\nE       \t(No symbol) [0x00007FF6F6BBBA81]\nE       \tGetHandleVerifier [0x00007FF6F70A6A2D+3379789]\nE       \tGetHandleVerifier [0x00007FF6F70BC32D+3468109]\nE       \tGetHandleVerifier [0x00007FF6F70B0043+3418211]\nE       \tGetHandleVerifier [0x00007FF6F6E3C78B+847787]\nE       \t(No symbol) [0x00007FF6F6CE757F]\nE       \t(No symbol) [0x00007FF6F6CE2FC4]\nE       \t(No symbol) [0x00007FF6F6CE315D]\nE       \t(No symbol) [0x00007FF6F6CD2979]\nE       \tBaseThreadInitThunk [0x00007FFCE53D7374+20]\nE       \tRtlUserThreadStart [0x00007FFCE711CC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "start": 1736851392538, "stop": 1736851399049, "uuid": "bbf28bde-532f-4c59-a7c1-904194373971", "historyId": "96ec70c0155a0bb3b0ce51a76b861aba", "testCaseId": "96ec70c0155a0bb3b0ce51a76b861aba", "fullName": "Blood Donor Automation#test_donation_req", "labels": [{"name": "suite", "value": "Blood Donor Automation"}, {"name": "host", "value": "dig-opsroom-1"}, {"name": "thread", "value": "26164-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Blood Donor Automation"}]}