{"name": "test_only_username_empty", "status": "failed", "statusDetails": {"message": "Failed: Test failed due to timeout: Message:", "trace": "setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"24a65898341312d7dbd20ddd1a9615c8\")>\n\n    def test_only_username_empty(setup):\n        driver = setup\n        try:\n            # Your test steps here\n            username = driver.find_element(By.XPATH, \"//input[@id='Input_UserName']\")\n            username.clear()\n            password = driver.find_element(By.XPATH, \"//input[@id='Input_Password']\")\n            password.clear()\n    \n            valid_username = \"\"\n            valid_password = \"Psca@123\"\n            login(driver, valid_username, valid_password)\n    \n            # Wait for an alert or error message\n>           WebDriverWait(driver, 3).until(EC.alert_is_present())\n\ntest_Police_KPI's_Dashboard.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"24a65898341312d7dbd20ddd1a9615c8\")>, method = <function alert_is_present.<locals>._predicate at 0x0000020DDC9E71A0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"24a65898341312d7dbd20ddd1a9615c8\")>\n\n    def test_only_username_empty(setup):\n        driver = setup\n        try:\n            # Your test steps here\n            username = driver.find_element(By.XPATH, \"//input[@id='Input_UserName']\")\n            username.clear()\n            password = driver.find_element(By.XPATH, \"//input[@id='Input_Password']\")\n            password.clear()\n    \n            valid_username = \"\"\n            valid_password = \"Psca@123\"\n            login(driver, valid_username, valid_password)\n    \n            # Wait for an alert or error message\n            WebDriverWait(driver, 3).until(EC.alert_is_present())\n            alert = driver.switch_to.alert\n            assert \"Please fill out this field\" in alert.text\n            alert.accept()\n    \n        except TimeoutException as e:\n            # Take screenshot and attach to Allure report\n            take_screenshot(driver, 'test_only_username_empty_failure')\n>           pytest.fail(f\"Test failed due to timeout: {str(e)}\")\nE           Failed: Test failed due to timeout: Message:\n\ntest_Police_KPI's_Dashboard.py:189: Failed"}, "attachments": [{"name": "test_only_username_empty_failure_screenshot", "source": "c4d27219-9718-49a1-96c7-950c539346c4-attachment.png", "type": "image/png"}], "start": 1724763147301, "stop": 1724763153938, "uuid": "be53af61-e303-4bc4-aa9b-05a39f411a69", "historyId": "b89414b5e2ff764d42ba618eb809410e", "testCaseId": "b89414b5e2ff764d42ba618eb809410e", "fullName": "test_Police_KPI's_Dashboard#test_only_username_empty", "labels": [{"name": "suite", "value": "test_Police_KPI's_Dashboard"}, {"name": "host", "value": "dig-opsroom-1"}, {"name": "thread", "value": "19560-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_Police_KPI's_Dashboard"}]}